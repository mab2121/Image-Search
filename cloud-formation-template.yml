AWSTemplateFormatVersion: "2010-09-09"
Metadata:
Description: ""
Resources:
    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "${LambdaFunction2}-role-uj32kddn"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
              - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSLambdaBasicExecutionRole-322f2b38-5c43-4cb4-9c14-302d36e3b156"

    IAMRole2:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-aws-lambda-to-github"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSCodePipelineServiceRole-${AWS::Region}-aws-lambda-to-github"

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "imagebuck"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            NotificationConfiguration: 
                LambdaConfigurations: 
                  - 
                    Event: "s3:ObjectCreated:Put"
                    Function: !GetAtt LambdaFunction2.Arn
            OwnershipControls: 
                Rules: 
                  - 
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: false
                BlockPublicPolicy: false
                IgnorePublicAcls: false
                RestrictPublicBuckets: false

    S3Bucket2:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "cs-gy-temp"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            OwnershipControls: 
                Rules: 
                  - 
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: false
                BlockPublicPolicy: false
                IgnorePublicAcls: false
                RestrictPublicBuckets: false

    S3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket2
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "PublicReadGetObject"
                    Effect: "Allow"
                    Principal: "*"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket2}/*"

    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: !Sub "search-${OpenSearchServiceDomain}"
            Handler: "lambda_function.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "prod-iad-c1-djusa-tasks"
                S3Key: !Sub "/snapshots/${AWS::AccountId}/search-${OpenSearchServiceDomain}-9ffd2ca4-a8ff-4169-a002-0e547e926631"
                S3ObjectVersion: "nxv84BobC_gvCgr4p6ycKKbEfT1htCg_"
            MemorySize: 128
            Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/search-${OpenSearchServiceDomain}-role-tkz2m33w"
            Runtime: "python3.12"
            Timeout: 30
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaFunction2:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: !Sub "index-${OpenSearchServiceDomain}"
            Handler: "lambda_function.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "prod-iad-c1-djusa-tasks"
                S3Key: !Sub "/snapshots/${AWS::AccountId}/index-${OpenSearchServiceDomain}-b666f129-6704-4e09-82d8-65f7bb3dc42c"
                S3ObjectVersion: "m1cBRqBKoVLO5bH_nsugZ2PQC9I2xIJv"
            MemorySize: 128
            Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/index-${OpenSearchServiceDomain}-role-uj32kddn"
            Runtime: "python3.12"
            Timeout: 20
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:e0lsb4r4x2/*/GET/search"

    LambdaPermission2:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:dv6y6hkmd4/*/GET/search"

    LambdaPermission3:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/search"

    LambdaPermission4:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction2.Arn
            Principal: "s3.amazonaws.com"
            SourceArn: !Sub "arn:aws:s3:::${S3Bucket}"

    CodePipelinePipeline:
        Type: "AWS::CodePipeline::Pipeline"
        Properties:
            Name: "aws-lambda-to-github"
            RoleArn: !GetAtt IAMRole2.Arn
            ArtifactStore: 
                Location: !Sub "codepipeline-${AWS::Region}-184492321127"
                Type: "S3"
            Stages: 
              - 
                Name: "Source"
                Actions: 
                  - 
                    Name: "Source"
                    ActionTypeId: 
                        Category: "Source"
                        Owner: "AWS"
                        Provider: "CodeStarSourceConnection"
                        Version: "1"
                    Configuration: 
                        BranchName: "main"
                        ConnectionArn: !Sub "arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/999e0653-4769-42b1-a2e6-8aa32375432e"
                        DetectChanges: "true"
                        FullRepositoryId: "mab2121/Image-Search"
                        OutputArtifactFormat: "CODE_ZIP"
                    OutputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1
              - 
                Name: "Build"
                Actions: 
                  - 
                    Name: "Build"
                    ActionTypeId: 
                        Category: "Build"
                        Owner: "AWS"
                        Provider: "CodeBuild"
                        Version: "1"
                    Configuration: 
                        ProjectName: "github-to-lambda"
                    InputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    OutputArtifacts: 
                      - 
                        Name: "BuildArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "BuildVariables"
                    RunOrder: 1

    IAMServiceLinkedRole:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "opensearchservice.amazonaws.com"

    OpenSearchServiceDomain:
        Type: "AWS::OpenSearchService::Domain"
        Properties:
            DomainName: "photos"
            EngineVersion: "OpenSearch_2.11"
            ClusterConfig: 
                ColdStorageOptions: 
                    Enabled: false
                DedicatedMasterEnabled: false
                InstanceCount: 1
                InstanceType: "t3.small.elasticsearch"
                ZoneAwarenessEnabled: false
                WarmEnabled: false
            AccessPolicies: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::${AWS::AccountId}:role/service-role/index-photos-role-uj32kddn\",\"arn:aws:iam::${AWS::AccountId}:root\"]},\"Action\":\"es:ESHttp*\",\"Resource\":\"arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/photos/*\",\"Condition\":{\"IpAddress\":{\"aws:SourceIp\":\"69.120.116.14\"}}},{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${AWS::AccountId}:role/service-role/index-photos-role-uj32kddn\"},\"Action\":\"es:ESHttp*\",\"Resource\":\"arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/photos/*\"}]}"
            SnapshotOptions: {}
            snapshot_options: {}
            EncryptionAtRestOptions: 
                Enabled: true
                KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/a1519dcd-7a82-46a2-ad12-16881bf161e1"
            NodeToNodeEncryptionOptions: 
                Enabled: true
            AdvancedOptions: 
                "indices.fielddata.cache.size": "20"
                "indices.query.bool.max_clause_count": "1024"
                override_main_response_version: "false"
                "rest.action.multi.allow_explicit_index": "true"
            EBSOptions: 
                EBSEnabled: true
                VolumeType: "gp3"
                VolumeSize: 25
                Iops: 3000
                Throughput: 125
            CognitoOptions: 
                Enabled: false
            DomainEndpointOptions: 
                EnforceHTTPS: true
                TLSSecurityPolicy: "Policy-Min-TLS-1-0-2019-07"
                CustomEndpointEnabled: false
            AdvancedSecurityOptions: 
                Enabled: true
                InternalUserDatabaseEnabled: true
                AnonymousAuthEnabled: false

    IAMRole3:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "${LambdaFunction}-role-tkz2m33w"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy2

    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildBasePolicy-github-to-lambda-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                	"Version": "2012-10-17",
                	"Statement": [
                		{
                			"Effect": "Allow",
                			"Resource": [
                				"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/github-to-lambda",
                				"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/github-to-lambda:*"
                			],
                			"Action": [
                				"logs:CreateLogGroup",
                				"logs:CreateLogStream",
                				"logs:PutLogEvents"
                			]
                		},
                		{
                			"Effect": "Allow",
                			"Resource": [
                				"arn:aws:s3:::codepipeline-${AWS::Region}-*"
                			],
                			"Action": [
                				"s3:PutObject",
                				"s3:GetObject",
                				"s3:GetObjectVersion",
                				"s3:GetBucketAcl",
                				"s3:GetBucketLocation"
                			]
                		},
                		{
                			"Effect": "Allow",
                			"Action": [
                				"codebuild:CreateReportGroup",
                				"codebuild:CreateReport",
                				"codebuild:UpdateReport",
                				"codebuild:BatchPutTestCases",
                				"codebuild:BatchPutCodeCoverages"
                			],
                			"Resource": [
                				"arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/github-to-lambda-*"
                			]
                		},
                		{
                        "Effect": "Allow",
                        "Action": [
                            "lambda:AddPermission",
                            "lambda:RemovePermission",
                            "lambda:CreateAlias",
                            "lambda:UpdateAlias",
                            "lambda:DeleteAlias",
                            "lambda:UpdateFunctionCode",
                            "lambda:UpdateFunctionConfiguration",
                            "lambda:PutFunctionConcurrency",
                            "lambda:DeleteFunctionConcurrency",
                            "lambda:PublishVersion"
                        ],
                        "Resource": [ 
                            "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}",
                            "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction2}"
                		]        
                        }
                	]
                }

    IAMManagedPolicy2:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-64d90d42-c0e1-4986-81ff-679bda6c6159"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunction}:*"
                            ]
                        }
                    ]
                }

    IAMPolicy:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "es:ESHttpPut",
                                "es:ESHttpPost"
                            ],
                            "Resource": "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchServiceDomain}/*"
                        }
                    ]
                }
                
            Roles: 
              - !Ref IAMRole
            PolicyName: !Sub "open-${LambdaFunction}-access"

    IAMRole4:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "codebuild-github-to-lambda-service-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy

    ApiGatewayRestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: "AI Photo Search"
            Description: "AI Photo Search application, built during the Cloud Computing course at New York University."
            ApiKeySourceType: "HEADER"
            EndpointConfiguration: 
                Types: 
                  - "REGIONAL"

    ApiGatewayMethod:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource2
            HttpMethod: "GET"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            OperationName: "searchPhotos"
            RequestParameters: 
                "method.request.querystring.q": false
            MethodResponses: 
              - 
                ResponseModels: 
                    "application/json": "SearchResponse"
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
              - 
                ResponseModels: 
                    "application/json": "Error"
                StatusCode: "403"
              - 
                ResponseModels: 
                    "application/json": "Error"
                StatusCode: "500"
            Integration: 
                CacheKeyParameters: 
                  - "integration.request.querystring.q"
                CacheNamespace: !Ref ApiGatewayResource2
                ContentHandling: "CONVERT_TO_TEXT"
                IntegrationHttpMethod: "POST"
                IntegrationResponses: 
                  - 
                    ResponseTemplates: {}
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestParameters: 
                    "integration.request.querystring.q": "method.request.path.q"
                TimeoutInMillis: 29000
                Type: "AWS_PROXY"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}/invocations"

    ApiGatewayMethod2:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource
            HttpMethod: "OPTIONS"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses: 
              - 
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Headers": false
                    "method.response.header.Access-Control-Allow-Methods": false
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration: 
                CacheNamespace: !Ref ApiGatewayResource
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token, x-amz-meta-customLabels'"
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestTemplates: 
                    "application/json": "{\"statusCode\": 200}"
                TimeoutInMillis: 29000
                Type: "MOCK"

    ApiGatewayMethod3:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource
            HttpMethod: "PUT"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            OperationName: "uploadPhoto"
            RequestParameters: 
                "method.request.header.x-amz-meta-customLabels": false
                "method.request.querystring.folder": true
                "method.request.querystring.object": true
            MethodResponses: 
              - 
                ResponseModels: 
                    "application/json": "MODELe6b102"
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
              - 
                ResponseModels: 
                    "application/json": "Error"
                StatusCode: "403"
              - 
                ResponseModels: 
                    "application/json": "Error"
                StatusCode: "500"
            Integration: 
                CacheKeyParameters: 
                  - "method.request.querystring.folder"
                  - "method.request.querystring.object"
                  - "integration.request.header.x-amz-meta-customLabels"
                  - "integration.request.path.bucket"
                  - "integration.request.path.key"
                  - "method.request.header.x-amz-meta-customLabels"
                CacheNamespace: !Ref ApiGatewayResource
                Credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/APIGatewayS3ProxyPolicy"
                IntegrationHttpMethod: "PUT"
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    ResponseTemplates: {}
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestParameters: 
                    "integration.request.header.x-amz-meta-customLabels": "method.request.header.x-amz-meta-customLabels"
                    "integration.request.path.bucket": "method.request.path.folder"
                    "integration.request.path.key": "method.request.path.object"
                TimeoutInMillis: 29000
                Type: "AWS"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{key}"

    ApiGatewayMethod4:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource2
            HttpMethod: "OPTIONS"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses: 
              - 
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Headers": false
                    "method.response.header.Access-Control-Allow-Methods": false
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration: 
                CacheNamespace: !Ref ApiGatewayResource2
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'"
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestTemplates: 
                    "application/json": "{\"statusCode\": 200}"
                TimeoutInMillis: 29000
                Type: "MOCK"

    ApiGatewayResource:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "upload"
            ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

    ApiGatewayResource2:
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "search"
            ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

    S3Bucket3:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "cs-gy-9223-bucket1"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            WebsiteConfiguration: 
                IndexDocument: "index.html"
            OwnershipControls: 
                Rules: 
                  - 
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: false
                BlockPublicPolicy: false
                IgnorePublicAcls: false
                RestrictPublicBuckets: false

    S3BucketPolicy2:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket3
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "PublicReadGetObject"
                    Effect: "Allow"
                    Principal: "*"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket3}/*"

Outputs:
  FrontendBucketUrl:
    Description: URL of the public frontend S3 bucket
    Value: !Sub "http://${S3Bucket3}.s3-website-${AWS::Region}.amazonaws.com/"

